// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package admins

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// AdminsClient is the client API for Admins service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminsClient interface {
	GetAllAdmins(ctx context.Context, in *GetAllAdminsRequest, opts ...grpc.CallOption) (*GetAllAdminsResponse, error)
	IsUserAdmin(ctx context.Context, in *IsUserAdminRequest, opts ...grpc.CallOption) (*IsUserAdminResponse, error)
}

type adminsClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminsClient(cc grpc.ClientConnInterface) AdminsClient {
	return &adminsClient{cc}
}

func (c *adminsClient) GetAllAdmins(ctx context.Context, in *GetAllAdminsRequest, opts ...grpc.CallOption) (*GetAllAdminsResponse, error) {
	out := new(GetAllAdminsResponse)
	err := c.cc.Invoke(ctx, "/admins.Admins/GetAllAdmins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminsClient) IsUserAdmin(ctx context.Context, in *IsUserAdminRequest, opts ...grpc.CallOption) (*IsUserAdminResponse, error) {
	out := new(IsUserAdminResponse)
	err := c.cc.Invoke(ctx, "/admins.Admins/IsUserAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminsServer is the server API for Admins service.
// All implementations must embed UnimplementedAdminsServer
// for forward compatibility
type AdminsServer interface {
	GetAllAdmins(context.Context, *GetAllAdminsRequest) (*GetAllAdminsResponse, error)
	IsUserAdmin(context.Context, *IsUserAdminRequest) (*IsUserAdminResponse, error)
	mustEmbedUnimplementedAdminsServer()
}

// UnimplementedAdminsServer must be embedded to have forward compatible implementations.
type UnimplementedAdminsServer struct {
}

func (UnimplementedAdminsServer) GetAllAdmins(context.Context, *GetAllAdminsRequest) (*GetAllAdminsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAdmins not implemented")
}
func (UnimplementedAdminsServer) IsUserAdmin(context.Context, *IsUserAdminRequest) (*IsUserAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsUserAdmin not implemented")
}
func (UnimplementedAdminsServer) mustEmbedUnimplementedAdminsServer() {}

// UnsafeAdminsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminsServer will
// result in compilation errors.
type UnsafeAdminsServer interface {
	mustEmbedUnimplementedAdminsServer()
}

func RegisterAdminsServer(s grpc.ServiceRegistrar, srv AdminsServer) {
	s.RegisterService(&_Admins_serviceDesc, srv)
}

func _Admins_GetAllAdmins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAdminsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminsServer).GetAllAdmins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admins.Admins/GetAllAdmins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminsServer).GetAllAdmins(ctx, req.(*GetAllAdminsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admins_IsUserAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsUserAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminsServer).IsUserAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admins.Admins/IsUserAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminsServer).IsUserAdmin(ctx, req.(*IsUserAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Admins_serviceDesc = grpc.ServiceDesc{
	ServiceName: "admins.Admins",
	HandlerType: (*AdminsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllAdmins",
			Handler:    _Admins_GetAllAdmins_Handler,
		},
		{
			MethodName: "IsUserAdmin",
			Handler:    _Admins_IsUserAdmin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/admin/admin.proto",
}
