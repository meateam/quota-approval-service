// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package quotaApproval

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// QuotaApprovalClient is the client API for QuotaApproval service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuotaApprovalClient interface {
	CreateQuotaApproval(ctx context.Context, in *CreateQuotaApprovalRequest, opts ...grpc.CallOption) (*CreateQuotaApprovalResponse, error)
	GetQuotasApprovals(ctx context.Context, in *GetQuotasApprovalsRequest, opts ...grpc.CallOption) (*GetQuotasApprovalsResponse, error)
	GetQuotaApprovalByID(ctx context.Context, in *GetQuotaApprovalByIDRequest, opts ...grpc.CallOption) (*GetQuotaApprovalByIDResponse, error)
	UpdateQuotaApproval(ctx context.Context, in *UpdateQuotaApprovalRequest, opts ...grpc.CallOption) (*UpdateQuotaApprovalResponse, error)
}

type quotaApprovalClient struct {
	cc grpc.ClientConnInterface
}

func NewQuotaApprovalClient(cc grpc.ClientConnInterface) QuotaApprovalClient {
	return &quotaApprovalClient{cc}
}

func (c *quotaApprovalClient) CreateQuotaApproval(ctx context.Context, in *CreateQuotaApprovalRequest, opts ...grpc.CallOption) (*CreateQuotaApprovalResponse, error) {
	out := new(CreateQuotaApprovalResponse)
	err := c.cc.Invoke(ctx, "/quotaApproval.QuotaApproval/CreateQuotaApproval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotaApprovalClient) GetQuotasApprovals(ctx context.Context, in *GetQuotasApprovalsRequest, opts ...grpc.CallOption) (*GetQuotasApprovalsResponse, error) {
	out := new(GetQuotasApprovalsResponse)
	err := c.cc.Invoke(ctx, "/quotaApproval.QuotaApproval/GetQuotasApprovals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotaApprovalClient) GetQuotaApprovalByID(ctx context.Context, in *GetQuotaApprovalByIDRequest, opts ...grpc.CallOption) (*GetQuotaApprovalByIDResponse, error) {
	out := new(GetQuotaApprovalByIDResponse)
	err := c.cc.Invoke(ctx, "/quotaApproval.QuotaApproval/GetQuotaApprovalByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotaApprovalClient) UpdateQuotaApproval(ctx context.Context, in *UpdateQuotaApprovalRequest, opts ...grpc.CallOption) (*UpdateQuotaApprovalResponse, error) {
	out := new(UpdateQuotaApprovalResponse)
	err := c.cc.Invoke(ctx, "/quotaApproval.QuotaApproval/UpdateQuotaApproval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuotaApprovalServer is the server API for QuotaApproval service.
// All implementations must embed UnimplementedQuotaApprovalServer
// for forward compatibility
type QuotaApprovalServer interface {
	CreateQuotaApproval(context.Context, *CreateQuotaApprovalRequest) (*CreateQuotaApprovalResponse, error)
	GetQuotasApprovals(context.Context, *GetQuotasApprovalsRequest) (*GetQuotasApprovalsResponse, error)
	GetQuotaApprovalByID(context.Context, *GetQuotaApprovalByIDRequest) (*GetQuotaApprovalByIDResponse, error)
	UpdateQuotaApproval(context.Context, *UpdateQuotaApprovalRequest) (*UpdateQuotaApprovalResponse, error)
	mustEmbedUnimplementedQuotaApprovalServer()
}

// UnimplementedQuotaApprovalServer must be embedded to have forward compatible implementations.
type UnimplementedQuotaApprovalServer struct {
}

func (UnimplementedQuotaApprovalServer) CreateQuotaApproval(context.Context, *CreateQuotaApprovalRequest) (*CreateQuotaApprovalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuotaApproval not implemented")
}
func (UnimplementedQuotaApprovalServer) GetQuotasApprovals(context.Context, *GetQuotasApprovalsRequest) (*GetQuotasApprovalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuotasApprovals not implemented")
}
func (UnimplementedQuotaApprovalServer) GetQuotaApprovalByID(context.Context, *GetQuotaApprovalByIDRequest) (*GetQuotaApprovalByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuotaApprovalByID not implemented")
}
func (UnimplementedQuotaApprovalServer) UpdateQuotaApproval(context.Context, *UpdateQuotaApprovalRequest) (*UpdateQuotaApprovalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQuotaApproval not implemented")
}
func (UnimplementedQuotaApprovalServer) mustEmbedUnimplementedQuotaApprovalServer() {}

// UnsafeQuotaApprovalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuotaApprovalServer will
// result in compilation errors.
type UnsafeQuotaApprovalServer interface {
	mustEmbedUnimplementedQuotaApprovalServer()
}

func RegisterQuotaApprovalServer(s grpc.ServiceRegistrar, srv QuotaApprovalServer) {
	s.RegisterService(&_QuotaApproval_serviceDesc, srv)
}

func _QuotaApproval_CreateQuotaApproval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQuotaApprovalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaApprovalServer).CreateQuotaApproval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quotaApproval.QuotaApproval/CreateQuotaApproval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaApprovalServer).CreateQuotaApproval(ctx, req.(*CreateQuotaApprovalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuotaApproval_GetQuotasApprovals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuotasApprovalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaApprovalServer).GetQuotasApprovals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quotaApproval.QuotaApproval/GetQuotasApprovals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaApprovalServer).GetQuotasApprovals(ctx, req.(*GetQuotasApprovalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuotaApproval_GetQuotaApprovalByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuotaApprovalByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaApprovalServer).GetQuotaApprovalByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quotaApproval.QuotaApproval/GetQuotaApprovalByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaApprovalServer).GetQuotaApprovalByID(ctx, req.(*GetQuotaApprovalByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuotaApproval_UpdateQuotaApproval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQuotaApprovalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaApprovalServer).UpdateQuotaApproval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quotaApproval.QuotaApproval/UpdateQuotaApproval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaApprovalServer).UpdateQuotaApproval(ctx, req.(*UpdateQuotaApprovalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _QuotaApproval_serviceDesc = grpc.ServiceDesc{
	ServiceName: "quotaApproval.QuotaApproval",
	HandlerType: (*QuotaApprovalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateQuotaApproval",
			Handler:    _QuotaApproval_CreateQuotaApproval_Handler,
		},
		{
			MethodName: "GetQuotasApprovals",
			Handler:    _QuotaApproval_GetQuotasApprovals_Handler,
		},
		{
			MethodName: "GetQuotaApprovalByID",
			Handler:    _QuotaApproval_GetQuotaApprovalByID_Handler,
		},
		{
			MethodName: "UpdateQuotaApproval",
			Handler:    _QuotaApproval_UpdateQuotaApproval_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/quotaApproval/quotaApproval.proto",
}
